### DEFINES ENSEMBLE STACKING MODEL ###
import numpy as np
import pandas as pd
import torch
import torch.nn as nn
import torch.optim as optim
from joblib import load
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier

from src.models.nn_model import NN_model


def get_sk_preditions(X, model):
    """
    Get predictions from pretrained Level 0 scikit learn models
    Params:
    X : pandas df, input data matrix
    model : str, saved model to load, one of ['logistic_regression', 'random_forest', 'knn']
    Returns:
    predicted_probabilities, 1darray
    predicted_labels, 1darray
    """
    # load trained L0 scikit-learn model and get predictions
    model = load(f'report/results/saved_models/{model}.joblib')
    return model.predict_proba(X)[:, 1], model.predict(X)

def get_nn_preditions(X):
    """ 
    Get predictions from pretrained saved pytorch neural network (Level 0)
    X : pandas df, input data matrix
    Returns:
    predicted_probabilities, 1darray
    predicted_labels, 1darray
    """
    # convert X to torch tensor
    data = X.values.copy()
    X = torch.from_numpy(data).to(torch.float32)

    # load saved pytorch model
    # Load grid search results
    grid_df = pd.read_csv('report/results/hyperparameter_tuning/neural_network_tuning.csv')

    # Instantiate optiamal model
    input_size = X.shape[1]
    output_size = 1
    hidden_size = int(grid_df.iloc[0].hidden_size)
    dropout_prob = grid_df.iloc[0].dropout_prob
    n_layers = int(grid_df.iloc[0].n_layers)
    lr = grid_df.iloc[0].lr

    model_nn = NN_model(input_size=input_size, hidden_size=hidden_size, n_layers=n_layers, lr=lr, 
                                dropout_prob=dropout_prob, output_size=output_size)
    criterion = nn.BCELoss()
    optimizer = optim.Adam(model_nn.parameters(), lr=model_nn.lr)

    # Load saved model
    model_nn.load_state_dict(torch.load('report/results/saved_models/neural_network.pt'))

    # Set model to evaluation mode
    model_nn.eval()

    # Predicted probabilities
    pred_proba = model_nn(X).detach().numpy().flatten()
    # Predicted labels
    pred_labels = (pred_proba > 0.5).astype(int)

    return pred_proba, pred_labels

class StackingEnsemble:
    """Create an ensemble stacking model with pretrained level 0 models and logistic regression as the level 1 model"""
    def __init__(self, member_models, C=1.0):
        """
        member_models : list, one or several of ['logistic_regression', 'random_forest', 'knn', 'neural_network']
        C : float : regularization parameter for the Level 1 model
        """
        self.member_models = member_models
        self.C = C
        self.isfit = False
        self.level1 = LogisticRegression(C=self.C)
        return
    
    def pred_level0(self, X):
        """Collect probability predictions for the level 0 models into a pandas df"""
        level0_prob_list = [] # collect probability estimates for level 0 models
        for model in self.member_models:
            if model == 'neural_network':
                level0_prob_list.append(get_nn_preditions(X)[0])
            else:
                level0_prob_list.append(get_sk_preditions(X, model=model)[0])
        # concat results into pandas DataFrame
        df = pd.DataFrame(np.column_stack(level0_prob_list), columns=self.member_models)
        return df
    
    def fit(self, X, y):
        """Fit a Logistic Regression (Level 1) model to the probability outputs of the level 0 models"""
        # get level 0 predictions on X
        X_level0 = self.pred_level0(X=X)
        # fit level 1 model
        self.level1.fit(X=X_level0, y=y)
        self.isfit = True
        return
    
    def predict_proba(self, X):
        """Get output probability estimates from Level 1 model"""
        if self.isfit == False:
            raise Exception('Model has not been fit')
        # get level 0 predictions on X
        X_level0 = self.pred_level0(X=X)
        return self.level1.predict_proba(X_level0)
    
    def predict(self, X):
        """Get output predicted labels from Level 1 model"""
        if self.isfit == False:
            raise Exception('Model has not been fit')
        # get level 0 predictions on X
        X_level0 = self.pred_level0(X=X)
        return self.level1.predict(X_level0)
